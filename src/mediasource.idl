enum ReadyState {
    "closed",
    "open",
    "ended"
};

enum EndOfStreamError {
    "network",
    "decode"
};

[Constructor]
interface MediaSource : EventTarget {
 readonly attribute SourceBufferList sourceBuffers;
 readonly attribute SourceBufferList activeSourceBuffers;
 readonly attribute ReadyState readyState;
 attribute unrestricted double duration;
 SourceBuffer addSourceBuffer (DOMString type);
 void removeSourceBuffer (SourceBuffer sourceBuffer);
 void endOfStream (optional EndOfStreamError error);
 static boolean isTypeSupported (DOMString type);
};

enum AppendMode {
    "segments",
    "sequence"
};

interface SourceBuffer : EventTarget {
 attribute AppendMode mode;
 readonly attribute boolean updating;
 readonly attribute TimeRanges buffered;
 attribute double timestampOffset;
 readonly attribute AudioTrackList audioTracks;
 readonly attribute VideoTrackList videoTracks;
 readonly attribute TextTrackList textTracks;
 attribute double appendWindowStart;
 attribute unrestricted double appendWindowEnd;
 void appendBuffer (ArrayBuffer data);
 void appendBuffer (ArrayBufferView data);
 void appendStream (ReadableStream stream, [EnforceRange] optional unsigned long long maxSize);
 void abort ();
 void remove (double start, unrestricted double end);
 attribute TrackDefaultList trackDefaults;
};

interface SourceBufferList : EventTarget {
 readonly attribute unsigned long length;
 getter SourceBuffer (unsigned long index);
};

interface VideoPlaybackQuality {
 readonly attribute DOMHighResTimeStamp creationTime;
 readonly attribute unsigned long totalVideoFrames;
 readonly attribute unsigned long droppedVideoFrames;
 readonly attribute unsigned long corruptedVideoFrames;
 readonly attribute double totalFrameDelay;
};

enum TrackDefaultType {
    "audio",
    "video",
    "text"
};

[ Constructor (TrackDefaultType type, DOMString language, DOMString label, sequence<DOMString> kinds, optional DOMString byteStreamTrackID = "")]
interface TrackDefault {
 readonly attribute TrackDefaultType type;
 readonly attribute DOMString byteStreamTrackID;
 readonly attribute DOMString language;
 readonly attribute DOMString label;
 readonly attribute DOMString[] kinds;
};

[ Constructor (optional sequence<TrackDefault> trackDefaults = [])]
interface TrackDefaultList {
 readonly attribute unsigned long length;
 getter TrackDefault (unsigned long index);
};

partial interface URL {
 static DOMString createObjectURL (MediaSource mediaSource);
};

partial interface HTMLVideoElement {
 VideoPlaybackQuality getVideoPlaybackQuality ();
};

partial interface AudioTrack {
 readonly attribute SourceBuffer? sourceBuffer;
};

partial interface VideoTrack {
 readonly attribute SourceBuffer? sourceBuffer;
};

partial interface TextTrack {
 readonly attribute SourceBuffer? sourceBuffer;
};

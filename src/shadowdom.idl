partial interface DocumentOrShadowRoot {
            Selection? getSelection ();
            Element? elementFromPoint(double x, double y);
            sequence<Element> elementsFromPoint(double x, double y);
            CaretPosition? caretPositionFromPoint(double x, double y);
            readonly attribute Element? activeElement;
            readonly attribute StyleSheetList styleSheets;
          };
interface ShadowRoot : DocumentFragment {
readonly attribute Element host;
[TreatNullAs=EmptyString] attribute DOMString innerHTML;
};
partial interface Element {
ShadowRoot attachShadow(ShadowRootInit shadowRootInitDict);
readonly attribute HTMLSlotElement? assignedSlot;
attribute DOMString slot;
readonly attribute ShadowRoot? shadowRoot;
};
dictionary ShadowRootInit {
required ShadowRootMode mode;
boolean delegatesFocus = false;
};
enum ShadowRootMode {
"open", "closed"
};
partial interface Text {
readonly attribute HTMLSlotElement? assignedSlot;
};
interface HTMLSlotElement : HTMLElement {
attribute DOMString name;
sequence<Node> assignedNodes(optional AssignedNodesOptions options);
};
dictionary AssignedNodesOptions {
boolean flatten = false;
};
partial dictionary EventInit {
boolean scoped = false;
boolean relatedTargetScoped = false;
};
partial interface Event {
sequence<EventTarget> deepPath();
readonly attribute boolean scoped;
readonly attribute boolean relatedTargetScoped;
};

interface ShadowRoot : DocumentFragment {
Selection? getSelection();
Element? elementFromPoint(double x, double y);
sequence<Element> elementsFromPoint(double x, double y);
CaretPosition? caretPositionFromPoint(double x, double y);
readonly attribute Element? activeElement;
readonly attribute Element host;
[TreatNullAs=EmptyString] attribute DOMString innerHTML;
readonly attribute StyleSheetList styleSheets;
};
partial interface Element {
ShadowRoot createShadowRoot(ShadowRootInit shadowRootInitDict);
NodeList getDestinationInsertionPoints();
readonly attribute ShadowRoot? shadowRoot;
};
dictionary ShadowRootInit {
ShadowRootMode mode;
};
enum ShadowRootMode {
"open", "closed"
};
partial interface Text {
NodeList getDestinationInsertionPoints();
};
interface HTMLContentElement : HTMLElement {
attribute DOMString select;
sequence<Node> getDistributedNodes();
};
partial dictionary EventInit {
boolean scoped = false;
};
partial interface Event {
readonly attribute object deepPath;
readonly attribute boolean scoped;
};
